"deck:\n  cards: []\nplayers:\n  '0': { name: rcdilorenzo, cards: [{ _rank: 10, _suit: Diamonds }, { _rank: Jack, _suit: Hearts }, { _rank: 4, _suit: Diamonds }, { _rank: Jack, _suit: Clubs }, { _rank: 10, _suit: Clubs }, { _rank: 6, _suit: Clubs }, { _rank: Jack, _suit: Spades }, { _rank: 6, _suit: Spades }, { _rank: 10, _suit: Spades }, \"function (a, b) {\\n        return a.rank - b.rank;\\n      }\"], books: [] }\n  '1': { name: John, cards: [{ _rank: 5, _suit: Diamonds }, { _rank: 3, _suit: Clubs }, { _rank: 4, _suit: Spades }, { _rank: 5, _suit: Spades }, { _rank: 5, _suit: Clubs }, { _rank: 4, _suit: Hearts }, { _rank: 3, _suit: Spades }, \"function (a, b) {\\n        return a.rank - b.rank;\\n      }\"], books: [{ _rank: King, _suit: Diamonds }, { _rank: King, _suit: Clubs }, { _rank: King, _suit: Spades }, { _rank: King, _suit: Hearts }, { _rank: Queen, _suit: Diamonds }, { _rank: Queen, _suit: Spades }, { _rank: Queen, _suit: Clubs }, { _rank: Queen, _suit: Hearts }, { _rank: 7, _suit: Spades }, { _rank: 7, _suit: Clubs }, { _rank: 7, _suit: Hearts }, { _rank: 7, _suit: Diamonds }] }\n  '2': { name: Jay, cards: [{ _rank: 4, _suit: Clubs }, { _rank: 9, _suit: Hearts }, { _rank: 3, _suit: Hearts }, { _rank: 2, _suit: Diamonds }, { _rank: 8, _suit: Spades }, { _rank: 3, _suit: Diamonds }, { _rank: 8, _suit: Hearts }, { _rank: 9, _suit: Spades }, { _rank: 9, _suit: Clubs }, { _rank: 6, _suit: Hearts }, { _rank: Jack, _suit: Diamonds }, { _rank: 8, _suit: Clubs }, \"function (a, b) {\\n        return a.rank - b.rank;\\n      }\"], books: [] }\n  '3': { name: Ken, cards: [{ _rank: 6, _suit: Diamonds }, { _rank: 5, _suit: Hearts }, { _rank: 2, _suit: Spades }, { _rank: 2, _suit: Clubs }, { _rank: 2, _suit: Hearts }, { _rank: 10, _suit: Hearts }, { _rank: 8, _suit: Diamonds }, { _rank: 9, _suit: Diamonds }, \"function (a, b) {\\n        return a.rank - b.rank;\\n      }\"], books: [{ _rank: Ace, _suit: Diamonds }, { _rank: Ace, _suit: Hearts }, { _rank: Ace, _suit: Clubs }, { _rank: Ace, _suit: Spades }] }\n  remove: \"function (e) {\\n    var t, _ref;\\n    if ((t = this.indexOf(e)) > -1) {\\n      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);\\n    }\\n  }\"\n  count: \"function (requestedElement) {\\n    var count, element, _i, _len;\\n    count = {};\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      count[element] = (count[element] || 0) + 1;\\n    }\\n    if (count[requestedElement]) {\\n      return count[requestedElement];\\n    } else {\\n      return 0;\\n    }\\n  }\"\n  select: \"function (requestedElement) {\\n    var array, count, element, i, _i, _j, _len, _ref;\\n    count = {};\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      count[element] = (count[element] || 0) + 1;\\n    }\\n    if (count[requestedElement]) {\\n      for (i = _j = 1, _ref = count[requestedElement]; 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {\\n        array.push(requestedElement);\\n      }\\n      return array;\\n    } else {\\n      return null;\\n    }\\n  }\"\n  arrayFromProperty: \"function (propertyString) {\\n    var array, element, _i, _len;\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      array.push(element[propertyString]);\\n    }\\n    return array;\\n  }\"\n  arrayFromFunction: \"function (propertyString) {\\n    var array, element, _i, _len;\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      array.push(element[propertyString]());\\n    }\\n    return array;\\n  }\"\n  maximumValue: \"function () {\\n    return Math.max.apply(0, this);\\n  }\"\n  maximumCardValue: \"function () {\\n    var array, element, index, _i, _len;\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      if (element === \\\"Jack\\\") {\\n        element = 11;\\n      } else if (element === \\\"Queen\\\") {\\n        element = 12;\\n      } else if (element === \\\"King\\\") {\\n        element = 13;\\n      } else if (element === \\\"Ace\\\") {\\n        element = 14;\\n      }\\n      array.push(element);\\n    }\\n    index = array.indexOf(Math.max.apply(0, array));\\n    return this[index];\\n  }\"\n  contains: \"function (requestedElement) {\\n    var element, _i, _len;\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      if (element === requestedElement) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\"\ngameMessages:\n  '0': \"\\n\"\n  '1': 'John asks Jay for any 5''s!'\n  '2': 'Go fish!'\n  remove: \"function (e) {\\n    var t, _ref;\\n    if ((t = this.indexOf(e)) > -1) {\\n      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);\\n    }\\n  }\"\n  count: \"function (requestedElement) {\\n    var count, element, _i, _len;\\n    count = {};\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      count[element] = (count[element] || 0) + 1;\\n    }\\n    if (count[requestedElement]) {\\n      return count[requestedElement];\\n    } else {\\n      return 0;\\n    }\\n  }\"\n  select: \"function (requestedElement) {\\n    var array, count, element, i, _i, _j, _len, _ref;\\n    count = {};\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      count[element] = (count[element] || 0) + 1;\\n    }\\n    if (count[requestedElement]) {\\n      for (i = _j = 1, _ref = count[requestedElement]; 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {\\n        array.push(requestedElement);\\n      }\\n      return array;\\n    } else {\\n      return null;\\n    }\\n  }\"\n  arrayFromProperty: \"function (propertyString) {\\n    var array, element, _i, _len;\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      array.push(element[propertyString]);\\n    }\\n    return array;\\n  }\"\n  arrayFromFunction: \"function (propertyString) {\\n    var array, element, _i, _len;\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      array.push(element[propertyString]());\\n    }\\n    return array;\\n  }\"\n  maximumValue: \"function () {\\n    return Math.max.apply(0, this);\\n  }\"\n  maximumCardValue: \"function () {\\n    var array, element, index, _i, _len;\\n    array = [];\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      if (element === \\\"Jack\\\") {\\n        element = 11;\\n      } else if (element === \\\"Queen\\\") {\\n        element = 12;\\n      } else if (element === \\\"King\\\") {\\n        element = 13;\\n      } else if (element === \\\"Ace\\\") {\\n        element = 14;\\n      }\\n      array.push(element);\\n    }\\n    index = array.indexOf(Math.max.apply(0, array));\\n    return this[index];\\n  }\"\n  contains: \"function (requestedElement) {\\n    var element, _i, _len;\\n    for (_i = 0, _len = this.length; _i < _len; _i++) {\\n      element = this[_i];\\n      if (element === requestedElement) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\"\ncurrentPlayer: null\ndeal: \"function () {\\n      var count, player, _i, _results;\\n      _results = [];\\n      for (count = _i = 1; _i <= 5; count = ++_i) {\\n        _results.push((function() {\\n          var _j, _len, _ref, _results1;\\n          _ref = this.players;\\n          _results1 = [];\\n          for (_j = 0, _len = _ref.length; _j < _len; _j++) {\\n            player = _ref[_j];\\n            _results1.push(player.addCard(this.deck.draw()));\\n          }\\n          return _results1;\\n        }).call(this));\\n      }\\n      return _results;\\n    }\"\nisEnded: \"function () {\\n      var player, _i, _len, _ref;\\n      _ref = this.players;\\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\\n        player = _ref[_i];\\n        if (player.hand().length === 0) {\\n          return true;\\n        }\\n      }\\n      if (this.deck.numberOfCards() === 0) {\\n        return true;\\n      }\\n      return false;\\n    }\"\nwinner:\n  name: John\n  cards: [{ _rank: 5, _suit: Diamonds }, { _rank: 3, _suit: Clubs }, { _rank: 4, _suit: Spades }, { _rank: 5, _suit: Spades }, { _rank: 5, _suit: Clubs }, { _rank: 4, _suit: Hearts }, { _rank: 3, _suit: Spades }, \"function (a, b) {\\n        return a.rank - b.rank;\\n      }\"]\n  books: [{ _rank: King, _suit: Diamonds }, { _rank: King, _suit: Clubs }, { _rank: King, _suit: Spades }, { _rank: King, _suit: Hearts }, { _rank: Queen, _suit: Diamonds }, { _rank: Queen, _suit: Spades }, { _rank: Queen, _suit: Clubs }, { _rank: Queen, _suit: Hearts }, { _rank: 7, _suit: Spades }, { _rank: 7, _suit: Clubs }, { _rank: 7, _suit: Hearts }, { _rank: 7, _suit: Diamonds }]\n"
