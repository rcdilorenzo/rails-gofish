##= require ./Drawable

window.Hand = class Hand extends Drawable
  constructor: (@player, @x, @y, @orientation='horizontal', @backColor='blue') ->
    @generateCardImagesArray()
    @generateCreationPointsArray()
    @originalX = @x
    @isSelected = false
    @cardWidth = 71
    @cardHeight = 96

  generateCardImagesArray: ->
    @cardImages = []
    for card in @player.cards
      # check for undefined for testing only
      @cardImages.push(@getImage(card)) unless @getImage(card) == undefined
      
  generateCreationPointsArray: ->
    @creationPoints = []
    creationPoint = new Point(@x+20, @y+50) if @orientation == 'horizontal'
    creationPoint = new Point(@x+20, @y+40) if @orientation == 'vertical'
    @cardOffset = (100-@player.cards.length*8)
    @cardOffset = 10 if @cardOffset < 10
    for cardImage in @cardImages
      @creationPoints.push(creationPoint)
      creationPoint = creationPoint.offsetByX(@cardOffset) if @orientation == 'horizontal'
      creationPoint = creationPoint.offsetByY(@cardOffset) if @orientation == 'vertical'

  contains: (point) ->
    if !@background
      @createBackground()
    return @background.contains(point)

  _draw: (context) ->
    context.clearRect(0, 0, $(@canvas).width(), $(@canvas).height())
    @createBackground() if @createBackground
    @drawBackground(context)
    @drawName(context)
    @refreshImages(context)

  drawName: (context) ->
    context.fillStyle = 'black'
    context.font = "14pt American Typewriter"
    if @orientation == 'horizontal'
      context.fillText(@player.name + " - " + @player.score() + " Books", @x+20, @y+30)
    else
      context.fillText(@player.name + " - " + @player.score(), @x+20, @y+30)

  createBackground: ->
    @cardOffset = (100-@player.cards.length*8)
    @cardOffset = 10 if @cardOffset < 10
    if @orientation == 'horizontal'
      # @x = @originalX + (5-@cardImages.length)*(@cardOffset/2)
      @width = (@player.cards.length*(@cardOffset))+(@cardWidth-@cardOffset)+40
      @height = 166
    else
      @height = (@player.cards.length*(@cardOffset))+(@cardHeight-@cardOffset)+55
      @width = 111
    @background = new RoundedRectangle(@x, @y, @width, @height, 10)
    return @background

  drawBackground: (context) ->
    if @isSelected
      gradient = context.createLinearGradient(@x, @y, @x+@width, @y+@height)
      gradient.addColorStop(0,"#F8FFC8")
      gradient.addColorStop(1,"#D4DAAB")
    else
      gradient = context.createLinearGradient(@x, @y, @x+@width, @y+@height)
      gradient.addColorStop(0,"#D4D4D4")
      gradient.addColorStop(1,"#E3E3E3")
    context.fillStyle = gradient
    @background.draw(context)
    
  refreshImages: (context) ->
    @generateCardImagesArray()
    @generateCreationPointsArray()
    for cardImage in @cardImages
      # _i is the default count generated by CoffeeScript
      @displayImage(context, cardImage, @creationPoints[_i])

  getImage: (card) ->
    cardImage = $("#backs_#{@backColor}")[0]
    return cardImage

  displayImage: (context, cardImage, point) ->
    cardImage.setAttribute("data-x", point.x())
    cardImage.setAttribute("data-y", point.y())
    context.drawImage(cardImage, point.x(), point.y(), @cardWidth, @cardHeight)
